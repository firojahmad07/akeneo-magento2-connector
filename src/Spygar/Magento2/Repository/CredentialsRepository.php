<?php

namespace Spygar\Magento2\Repository;

use Doctrine\ORM\EntityManagerInterface;
use Doctrine\ORM\EntityRepository;
use Spygar\Magento2\Entity\Credentials;
use Oro\Bundle\PimDataGridBundle\Doctrine\ORM\Repository\DatagridRepositoryInterface;
/**
 * CredentialsRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */

class CredentialsRepository extends EntityRepository implements DatagridRepositoryInterface
{
    /** @var EntityManagerInterface */
    protected $entityManager;
    
    protected $channelRepository;

    /**
     * @param EntityManagerInterface $entityManager
     */
    public function __construct(
        EntityManagerInterface $entityManager,
        $channelRepository
    ) {
        $this->entityManager     = $entityManager;
        $this->channelRepository = $channelRepository;
        $classMeta = $this->entityManager->getClassMetadata(Credentials::class);
       
        parent::__construct($this->entityManager, $classMeta);
    }

    /**
    * Create a query builder used for the datagrid
    *
    * @return QueryBuilder
    */
    public function createDatagridQueryBuilder()
    {
        return $this->createQueryBuilder($this->getAlias());
    }

    /**
     * @return string
     */
    protected function getAlias()
    {
        return 'c';
    }

    /**
     * Get Credential with Details 
     * @return Array
     */
    public function getCredentialWithDetail($id)
    {
        $credential = $this->findOneById($id);

        $data = [];
        if ($credential) {
            $data = [
                'id'           => $credential->getId(),
                'url'          => $credential->getUrl(),
                'access_token' => $credential->getAccessToken(),
                'stores'       => $credential->getResources()['stores'],
                'storeViewMapping'   => $this->getDefaultStoreViewMapping($credential->getResources()),
                'parentAttributes'   => json_decode($credential->getExtras(), true)['parentAttributes'],
                'variantAttributes'  => json_decode($credential->getExtras(), true)['variantAttributes']
            ];            
        }

        return $data;
    }

    /** Get Default storeview mapping */
    public function getDefaultStoreViewMapping($storeData)
    {
        
        $formattedData   = [];
        if(isset($storeData['storeViewMapping']) && !empty($storeData['storeViewMapping'])) {
            $formattedData = $storeData['storeViewMapping'];
        } else {
            $defaultChannel  = \current($this->channelRepository->getFullChannels());
            $defaultLocale   = \current($defaultChannel->getLocaleCodes());
            $defaultCurrency = $defaultChannel->getCurrencies()->first()->getCode();
            foreach($storeData['stores'] as $store)
            {
                $formattedData[] = [
                    'store' => $store['code'],
                    'channel' => $defaultChannel->getCode(),
                    'locale' => $defaultLocale,
                    'currency' => $defaultCurrency
                ];
            }
        }
        
        return $formattedData;

    }
}
